<?php

/**
 * @file
 * Main module file for dc_utils.
 *
 * Functions include: adding Port Code during Save, AJAX interface for Ports to add parent Regions
 */

use Drupal\Core\Ajax\AjaxResponse ;
use Drupal\dc\Entity\DCContent;
//use Drupal\taxonomy\Entity\Term;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\Psr7\Uri;

use Drupal\content_entity_base\Entity\EntityTypeBase; 

/**
 *   Hooks
 */

/**
 * Implements hook_form_alter().
 */
function dc_utils_form_dc_content_port_edit_form_alter(&$form, $form_state ) {

  // for JSON.  Add 3 char code to page, but hide
  $form['actions']['submit']['#submit'][] = '_dc_utils_port_resave';
  $form['field_api_code']['#type'] = 'hidden';

  $port_code_array = $form['field_port_code']['widget']['#default_value'];

  if ( count($port_code_array) ) {
      $port_code = reset($port_code_array);
      $form['field_ports_regions']['widget']['#port_code'] = $port_code;
      $region_ids = _dc_utils_get_parent_tax($port_code);

      $form['field_ports_regions']['widget']['#default_value'] = $region_ids;

      $form['field_ports_regions']['widget']['#ajax']  = array (
        'callback' => '_dc_utils_region_ajax',
        'event' => 'change',
        'progress' => array(
          'type' => 'throbber',
          'message' => t('Updating...'),
        ),
      );

  } else {

    $form['field_ports_regions']['#type'] = 'hidden';

  }

} // end function

/**
 * Implements hook_form_alter().
 */
function dc_utils_form_dc_content_place_edit_form_alter(&$form, $form_state ) {

      // For placeholder POIs created by Ports, see if we can retrieve their data from Location ID / sid

      // Normal entry, exit
      if ($form['body']['widget'][0]['#default_value'] ) {
        //drupal_set_message('Place has data');
        return;
      }

      $sid = $form['field_sid']['widget'][0]['value']['#default_value'] ;

      if (! $sid) {        
        drupal_set_message('No Source ID, unable to retrieve data.');
        return;
      }

      $client = new \GuzzleHttp\Client();

      $uri = 'http://www.afar.com/syndication/partners/holland_america/places?auth_token=Mpbk15p9WKeh62hnFnqD&id=' . $sid;
      try {
        $result = $client->get($uri);
      }
      catch (BadResponseException $e) {
        drupal_set_message('Could not request complete HTTP request' . $uri );
        return;
      }

      $data = json_decode($result->getBody(), TRUE);

      if (!empty($data['places']) ) {

          $place = $data['places'][0];

          if (! (is_array($place) && (count($place)>1) ) ) { 
            drupal_set_message('No information available for Source ID ' . $sid );
            return;
          }

          drupal_set_message('Form information manually retrieved, must be Saved!');

          $field_map = array(
            'field_address' => 'short_description',
            'field_city' => 'location_city',
            'field_country' => 'location_country',
            'body' => 'text',
            'field_location_name' => 'location_name',
            'field_address' => 'location_address',
            'field_region' => 'location_region',
            );

          // Loop over common fields
          foreach ($field_map as $field => $json) {
            $form[$field]['widget'][0]['value']['#default_value'] = $place[$json] ;
          }

          // Types is multi-value array, using lowercase keys
          $poi_types = array();
          foreach ($place['type'] as $place_type) {
              $lower = mb_strtolower($place_type) ;
              $poi_types[] = $lower ;
          }

          $form['field_type']['widget']['#default_value'] =  $poi_types;
          $form['field_coordinates']['widget'][0]['lat']['#default_value'] = $place['latitude'] ;
          $form['field_coordinates']['widget'][0]['lng']['#default_value'] = $place['longitude'] ;

          $form['body']['widget'][0]['#default_value'] = $place['text'] ;
          $form['body']['widget'][0]['summary']['#default_value'] = $place['short_description'] ;

          $form['name']['widget'][0]['#default_value'] = $place['location_name'];
          $form['name']['widget'][0]['value']['#default_value'] = $place['location_name'];
          $form['#title'] = array();

          // Images is multi-value array, has draggable elements, and 'Add another item'
          $delta = 0;
          // Save blank entry, re-use
          $new_row = $form['field_images']['widget'][0];

          foreach ($place['images'] as $image) {
            $form['field_images']['widget'][$delta]['#delta'] = $delta;
            $form['field_images']['widget'][$delta]['title']['#default_value'] = $image['title'];
            $form['field_images']['widget'][$delta]['uri']['#default_value'] = $image['url'];
            $form['field_images']['widget'][$delta]['width']['#default_value'] = $image['width'];
            $form['field_images']['widget'][$delta]['height']['#default_value'] = $image['height'];
            $form['field_images']['widget'][$delta]['#weight'] = $delta;
            $form['field_images']['widget'][$delta]['_weight']['#delta'] = $delta;
            $form['field_images']['widget'][$delta]['_weight']['#default_value'] = $delta;
            $form['field_images']['widget'][$delta]['_weight']['#weight'] = 100 * $delta;
            $delta++;
            $form['field_images']['widget']['#max_delta'] = $delta;
            if (! isset($form['field_images']['widget'][$delta]) )  $form['field_images']['widget'][$delta] = $new_row;
          }

          // add empty 'new item' fields after images
          if ($delta) {
            $form['field_images']['widget'][$delta]['#delta'] = $delta;
            $form['field_images']['widget'][$delta]['#weight'] = $delta;
            $form['field_images']['widget'][$delta]['_weight']['#delta'] = $delta;
            $form['field_images']['widget'][$delta]['_weight']['#default_value'] = $delta;
            $form['field_images']['widget'][$delta]['_weight']['#weight'] = 100 * $delta;
          }

          // SELECT form item needs form state update
          $new_state = array(
              'field_type' => array(
                'widget' => array(
                  '#default_value' => $poi_types,
                  )
                )
            );

          $form_state->setFormState( $new_state );

      } // end if placeholder POI

} // end function

/**
 * Implements hook_entity_presave(Drupal\Core\Entity\EntityInterface $entity)
 */
function dc_utils_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

  // Check/set values for DC content during Save

  if ($entity->getEntityTypeId() !== 'dc_content') {
    return [];
  }

  if ($entity->bundle() == 'port') {

      $port_code_tid = $entity->get('field_port_code');

      if ( $port_code_tid && $port_code_tid->getValue() ) {
          // value set. do nothing.
      } else {
        // 3 letter port code usually stored here 
        $port_code_field = $entity->get('field_api_code')->getValue();
        $port_code_value = reset( $port_code_field );
        if ($port_code_value) {

            if (is_array($port_code_value) ) {
              $port_code = $port_code_value['value'] ;
              // Get the TID for the 3 letter code
              $query = db_query('SELECT entity_id from {taxonomy_term__field_code} ttfc  where ttfc.field_code_value = :port_code', array(':port_code' => $port_code ) );
              $data = $query->fetch();

              if ($data) {
                $tid = reset($data);
                $entity->set('field_port_code', $tid);

                // ??
                //return [];

             }
           }
        }
      }

   } else if ($entity->bundle() == 'place') {

      // Try to add link a Place to its Source ID if not set
      $dc_id = $entity->get('id')->getValue();
      $dc_id_value = $dc_id[0]['value'];

      $source_id = $entity->get('field_sid')->getValue();
      $source_id_value = $source_id[0]['value'];

      if ($dc_id_value && $source_id_value) _dc_utils_get_set_place_id($source_id_value, $dc_id_value) ;

  }

} // end function



/**
 *   Custom Calls
 */

/**
 *   Helper function to try to link placeholder POI to source, so can be found during import/Migration
 */
function _dc_utils_get_set_place_id($source_id, $dest_id) {

    // Try to find source ID in the import table
    $query = db_query('SELECT destid1 from {migrate_map_afar_dc_place} p  where p.sourceid1 = :source_id', array(':source_id' => $source_id ) );
    $data = $query->fetch();

    // if entry already exists, do nothing
    if ($data) {
      $destid1 = reset($data);
      return $destid1;
    } else {

        // If no entry, create one.
        $test = db_insert('migrate_map_afar_dc_place') 
        ->fields(array(
            'sourceid1' => $source_id,
            'destid1' => $dest_id,
            'hash'    => '',
            'source_ids_hash'    => '',
            ))
        ->execute();

        return FALSE;
    }
}


/**
 *   Accepts 3 character Port Code. Returns TIDs of Region Taxonomy terms containing it.
 */
function _dc_utils_get_parent_tax($port_code) {

  $results = array() ;

  $query = db_query('SELECT frc.entity_id FROM {taxonomy_term__field_ports} fp join {dc_content__field_region_code} frc on fp.entity_id = frc.field_region_code_target_id where fp.field_ports_target_id = :port_code', array(':port_code' => $port_code ) );

  $data = $query->fetchAll();

  foreach ($data as $delta => $ent_id) {

    $results[] = $ent_id->entity_id ;

  }

  return $results;

} // end function

/**
 *   Accepts 3 character Port Code, DC Region entity_id, and checkbox status 
 *   Will either add or remove Port Code taxonomy term for that Region based on $checked being 0 or not
 */
function _dc_utils_adjust_region_term($port_code, $region_id, $checked) {

    $region_tid = FALSE;

    // Get region tid from ID
    $query = db_query('SELECT frc.field_region_code_target_id from {dc_content__field_region_code} frc  where frc.entity_id = :region_id', array(':region_id' => $region_id ) );
    $data = $query->fetchAll();

    if ($data) {
      foreach ($data as $delta => $tid) {
        $region_tid = $tid->field_region_code_target_id ;
      }
    }

    if (! $region_tid ) return FALSE;

    // checked will be 0 or same value as $region_id
    if ($checked) {
      // Add port taxonomy term

        // Find the delta to use for Insert
        $query = db_query('SELECT max(delta) from {taxonomy_term__field_ports} ttfp  where ttfp.entity_id = :region_tid', array(':region_tid' => $region_tid ) );
        $data = $query->fetch();

        // Set max to delta + 1 if results, 0 otherwise
        if ($data) {
          $max = reset($data);
          $max++;
        } else {
          $max = 0;
        }

        // Add Port's tid to field of Port's term
        $test = db_insert('taxonomy_term__field_ports') 
        ->fields(array(
            'bundle' => 'regions',
            'entity_id' => $region_tid,
            'revision_id' => $region_tid,
            'langcode'    => 'en',
            'delta'       => $max,
            'field_ports_target_id'       => $port_code,
            ))
        ->execute();

    } else {
      // Remove port taxonomy term

        $query = db_query('SELECT ttfp.delta FROM {taxonomy_term__field_ports} ttfp  where ttfp.field_ports_target_id = :port_code and ttfp.entity_id = :region_tid', array(':port_code' => $port_code, ':region_tid' => $region_tid ) );

        $data = $query->fetch();

        if ($data) {
          $delta = reset($data);

          // remove the entry
          db_delete('taxonomy_term__field_ports') 
          ->condition('entity_id', $region_tid, '=')
          ->condition('field_ports_target_id', $port_code, '=')
          ->execute();

          // decrement any deltas above that point 
          db_update('taxonomy_term__field_ports') 
          ->fields(array(
              'delta' => delta - 1,
            ))
          ->condition('entity_id', $region_tid, '=')
          ->condition('delta', $delta, '>')
          ->execute();

        } else {

          // Should always have a value. May not need to put anything here.

        }

    }

} // end function

/**
 * The ajax call for the form. A variation of hook_form_alter()
 */
function _dc_utils_region_ajax(&$form, $form_state ) {

    $ajax_response = new AjaxResponse();

    $port_code = isset($form['field_ports_regions']['widget']['#port_code']) ? $form['field_ports_regions']['widget']['#port_code'] : '' ;

    $trigger  = $form_state->getTriggeringElement();

    // the entity id for the region
    $region_id = $trigger['#return_value'] ;
    // 0 or same as region_id
    $checked = $trigger['#value'];

    _dc_utils_adjust_region_term($port_code, $region_id, $checked);

    return $ajax_response;

} // end function


/**
 * Gets 3 character port code from form, saves out JSON
 */
function _dc_utils_port_resave(&$form, $form_state ) {
    $port_code = $form['field_api_code']['widget'][0]['value']['#default_value'];
    _dc_utils_save_json_port_code($port_code);
}

/**
 * Called from DC_CONTENT toggle function
 */
function _dc_utils_toggle_status($dc_content) {
    $uid = \Drupal::currentUser()->id();
    if ($uid < 2) return;  // don't process if not user-triggered

    $fields = array_keys( $dc_content->getFields() ) ;
    if (! in_array('field_port_code', $fields) ) return;
    $field_api_code = $dc_content->get('field_api_code')->getValue();
    _dc_utils_save_json_port_code( $field_api_code[0]['value'] );
}

/**
 * Accepts 3 char port code, saves JSON via view call
 */
function _dc_utils_save_json_port_code($port_code) {
    if ( strlen($port_code) < 3) return;
    $data = \Drupal::service('renderer')->renderPlain(views_embed_view('utrip_port_endpoint', 'rest_utrip_ports', $port_code));
    $replace = FILE_EXISTS_REPLACE;
    $subpath = '/destination-central/api/v0.1/utrip/en/ports/'; // private will be /cdsshore/prod/jsonroot/hal/cms/ on qa
    try {
      $destination = 'private://' . $subpath . $port_code . '.json' ;
      $path = file_unmanaged_save_data($data, $destination , $replace ) ;
    } catch (Exception $e) {
      drupal_set_message('Unable to save Port json: ' . $destination );
    }
}

/**
 *  Does json save for all port codes
 */
function _dc_utils_port_code_json_bulk_update() {

   $query = db_query( "SELECT field_code_value FROM {taxonomy_term__field_code} where bundle = 'ports'"  );
    $data = $query->fetchCol();

    if ($data) {
      foreach ($data as  $port_code) {
        _dc_utils_save_json_port_code($port_code) ;
      }
    }

}
