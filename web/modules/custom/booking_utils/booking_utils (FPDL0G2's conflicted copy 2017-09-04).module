<?php

/**
 * @file
 * Contains booking_utils.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function booking_utils_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the booking_utils module.
    case 'help.page.booking_utils':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Utilities for Booking Flow') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_theme().
 */
function booking_utils_theme($existing, $type, $theme, $path) {

  //to-do:  change function call to template
  return [
    'deck_image_rooms' => [
      'variables' => [
        'value' => NULL,
        'text' => NULL,
        'class' => NULL,
      ],
      'function'	=>	'booking_utils_render',
    ],

    'deck_edit_image' => [
      'variables' => array(
        'uri' => NULL,
        'url' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
      'template' => 'deck-image-rooms',
    ],
  ];
}



/**
 * Implements 
 */
// theme callback.
function booking_utils_render($variables) {

  $output_array = array();
	$rooms = $variables['value']['rooms'];

  if (! $rooms) return array();

  $output_array['#attached']['library'][] = 'booking_utils/node-deck-css' ;
	$keys = array_keys($rooms);

  $max_room_height = 0;

	foreach ($rooms as $num => $room ) {

    $sum =  $room['roomTop'] + $room['roomHeight'];

    if ($sum > $max_room_height) $max_room_height = $sum ;

		$style = 'width: ' . $room['roomWidth'] . ' ; height: ' . $room['roomHeight'] . ' ; line-height: ' . $room['roomHeight'] . ' ; top: ' . $room['roomTop']. ' ; left: ' . $room['roomLeft'] . ' ; ' ;

		$attributes = array(
			'id'	=> 'rm' . $num,
			'style' =>  $style ,
			'class'	=> array( $room['roomShape'], 'room_image_div', 'room-image-div'),
			);
		$item = array(
			'#type'	=> 'html_tag',
			'#attributes' => $attributes,
			'#tag'	=> 	'div',
			'#value' => $num,
			);

		$output_array[] = $item;

	}

	$item = array(
		'#type'	=> 'html_tag',
		'#attributes' => array(),
		'#tag'	=> 	'div',
		'#value' => 'Maximum roomHeight value: ' . $max_room_height,
  );

	$output_array[] = $item;

	$output_array[0]['#attached'] = array(
		'library' => array(
			'booking_utils/node-deck-css',
			),
		);

	return drupal_render($output_array ) ;

}


//

/**
 * Implements hook_form_alter().
 *
 */

function booking_utils_form_node_deck_edit_form_alter(&$form, $form_state ) {

  if (! isset($form['field_deckmap_image']) ) return;

  $saved_json = $form['field_room_json_data']['widget'][0]['value']['#default_value'];
  $maxes = _booking_utils_find_img_max( $saved_json );

  $fid = 0;
  $width = 0;
  $height = 0;
  if (isset($form['field_deckmap_image']['widget'][0]['#default_value']) ) {
    $values = $form['field_deckmap_image']['widget'][0]['#default_value'];

    $fids = $values['fids'];
    $fid = reset($values['fids']);

    if ($fid) {
      $file = file_load($fid);
    } else {
      return;
    }

    $width = $values['width'];
    $height = $values['height'];

    $variables = array();

    // The image.factory service will check if our image is valid.
    $image = \Drupal::service('image.factory')->get($file->getFileUri());
    if ($image->isValid()) {
      $width = $image->getWidth();
      $height = $image->getHeight();
    }

    $uri = $file->getFileUri() ;
    $url = file_create_url($uri);

    $json_image  = array(
          '#theme' => 'deck_edit_image',
          '#width' => $width,
          '#height' => $height,
          '#attributes' => array('class' => 'json-image-attribute-class',),
          '#uri' => $uri,
          '#url' => $url,
       );

    if ($maxes) {
      if ($maxes['max_height'] > $height) $json_image['#height'] = $maxes['max_height'];
    }

    $form['field_room_json_data']['widget'][0]['value']['#rows'] = 12 ;
    $form['field_room_json_data']['widget'][0]['value']['#cols'] = 35 ;

    $form['field_room_json_data']['widget']['json_data'] = $json_image;

    return;

  }

} // end function


function _booking_utils_find_img_max($json_text) {

      $room_entries = json_decode($json_text, TRUE);

      if (! $room_entries) return FALSE;

      $max_width = 0;
      $max_height = 0;

      $max = array();

      foreach ($room_entries as $room) {
        $vert =  $room['roomTop'] + $room['roomHeight'];
        $horiz = $room['roomLeft'] + $room['roomWidth'];

        if ($vert > $max_height ) $max_height = $vert;
        if ($horiz > $max_width ) $max_width = $horiz;
      }

      return array(
        'max_width' => $max_width,
        'max_height' => $max_height,
      );

}

function booking_utils_views_post_execute(ViewExecutable $view) {

    $ids = ['ship', 'ships', ];
    if ( in_array( $view->id() , $ids ) ) {

        $attributes = $view->getRequest()->attributes->all();
        $datestr = '';
        if ( isset($attributes['arg_1']) )  $datestr =  $attributes['arg_1'];
        $result = $view->result ;
        $matched_rev = NULL;
        foreach ($result as $row ) {
            $_ent = $row->_entity;
            if ( method_exists($_ent, 'getType') && ($_ent->getType() == 'deck') ) {
                $vals = $_ent->toArray() ;
                if (  ($vals['field_valid_from'] ) || ($vals['field_valid_until'])   ) {
                   $matched_rev = $_ent;
                   $nid = $_ent->id();
                   $vids = \Drupal::entityManager()->getStorage('node')->revisionIds($_ent);
                   foreach ($vids as $vid) {
                      $rev = \Drupal::entityManager()->getStorage('node')->loadRevision($vid);
                      $vals = $rev->toArray() ;
                      if   ($vals['field_valid_from'] )  {
                        $val_array = reset($vals['field_valid_from']);
                        $date =  str_replace('-', '', $val_array['value']);
                        if ($date > $datestr) continue;
                      }
                      if ($vals['field_valid_until'])  {
                        $val_array = reset($vals['field_valid_until']);
                        $date =  str_replace('-', '', $val_array['value']  );
                        if ($date < $datestr) continue;
                      }

                      $matched_rev = $rev;

                  } // end revision loop check
                  $row->_entity = $matched_rev ;
                }
            }
        }// end foreach row
    }
}