<?php

/**
 * @file
 * Contains \Drupal\{{module_name}}\Form\{{ class_name }}.
 */

namespace Drupal\{{module_name}}\Form;

use Drupal\Core\Form\ConfigFormBase;
{% if services is not empty %}
use Drupal\Core\Config\ConfigFactoryInterface;
{% include 'skeleton/module/shared/services-use-operator.php.twig' %}
{% endif %}

class {{ class_name }} extends ConfigFormBase
{
{% if services is not empty %}
{% include 'skeleton/module/shared/services-class-properties-declaration.php.twig' %}

  public function __construct(
    ConfigFactoryInterface $config_factory,
    {{ servicesAsParameters(services)|join(', \n') }}
  )
  {
    parent::__construct($config_factory);
{% include 'skeleton/module/shared/services-class-properties-initialization.php.twig' %}
  }

  public static function create(ContainerInterface $container) {
    return new static(
        $container->get('config.factory'),
{% include 'skeleton/module/shared/services-class-properties-injection.php.twig' %}
    );
  }
{% endif %}

  /**
   * {@inheritdoc}
   */
  public function getFormID()
  {
    return '{{form_id}}';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, array &$form_state)
  {
    $config = $this->config('{{module_name}}.{{form_id}}_config');
  {% for input in inputs %}
  $form['{{ input.name }}'] = [
      '#type' => '{{ input.type }}',
      '#title' => $this->t('{{ input.label }}'),
      '#description' => $this->t(''),
      '#default_value' => $config->get('{{ input.name }}'),
    ];
  {% endfor %}
  return parent::buildForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, array &$form_state)
  {
    return parent::validateForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, array &$form_state)
  {
    parent::submitForm($form, $form_state);

    $this->config('{{module_name}}.{{form_id}}_config')
    {% for input in inputs %}
      ->set('{{ input.name }}', $form_state['values']['{{ input.name }}'])
    {% endfor %}
    ->save();
  }
}
